eval("//# sourceURL=assets/ember-cli/loader.js");

;eval("define(\"selby/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"selby/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix,\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, config.modulePrefix);\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=selby/app.js");

;eval("define(\"selby/config/environment\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = {\"modulePrefix\":\"selby\",\"environment\":\"development\",\"baseURL\":\"/\",\"locationType\":\"auto\",\"EmberENV\":{\"FEATURES\":{}},\"APP\":{\"LOG_ACTIVE_GENERATION\":true,\"LOG_VIEW_LOOKUPS\":true}};\n  });//# sourceURL=selby/config/environment.js");

;eval("define(\"selby/components/line-chart\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var DURATION = 1500;\n    var DELAY    = 500;\n\n    __exports__[\"default\"] = Ember.Component.extend({\n      draw: function() {\n        this.drawLineChart(\'lineChart\', this.get(\'data\'));\n      }.on(\'didInsertElement\'),\n      drawLineChart: function(elementId, data) {\n        //alert(\'hey\');\n        // parse helper functions on top\n        var parse = d3.time.format( \'%Y-%m-%d\' ).parse;\n        // data manipulation first\n        data = data.map( function( datum ) {\n          datum.date = parse( datum.date );\n\n          return datum;\n        } );\n\n        // TODO code duplication check how you can avoid that\n        var containerEl = document.getElementById( elementId ),\n            width       = containerEl.clientWidth,\n            height      = width * 0.4,\n            margin      = {\n              top    : 30,\n              right  : 10,\n              left   : 10\n            },\n\n            detailWidth  = 98,\n            detailHeight = 55,\n            detailMargin = 10,\n\n            container   = d3.select( containerEl ),\n            svg         = container.select( \'svg\' )\n                                    .attr( \'width\', width )\n                                    .attr( \'height\', height + margin.top ),\n\n            x          = d3.time.scale().range( [ 0, width - detailWidth ] ),\n            xAxis      = d3.svg.axis().scale( x )\n                                      .ticks ( 8 )\n                                      .tickSize( -height ),\n            xAxisTicks = d3.svg.axis().scale( x )\n                                      .ticks( 16 )\n                                      .tickSize( -height )\n                                      .tickFormat( \'\' ),\n            y          = d3.scale.linear().range( [ height, 0 ] ),\n            yAxisTicks = d3.svg.axis().scale( y )\n                                      .ticks( 12 )\n                                      .tickSize( width )\n                                      .tickFormat( \'\' )\n                                      .orient( \'right\' ),\n\n            area = d3.svg.area()\n                          .interpolate( \'linear\' )\n                          .x( function( d )  { return x( d.date ) + detailWidth / 2; } )\n                          .y0( height )\n                          .y1( function( d ) { return y( d.value ); } ),\n\n            line = d3.svg.line()\n                      .interpolate( \'linear\' )\n                      .x( function( d ) { return x( d.date ) + detailWidth / 2; } )\n                      .y( function( d ) { return y( d.value ); } ),\n\n            startData = data.map( function( datum ) {\n                          return {\n                            date  : datum.date,\n                            value : 0\n                          };\n                        } ),\n\n            circleContainer;\n\n        // Compute the minimum and maximum date, and the maximum price.\n        x.domain( [ data[ 0 ].date, data[ data.length - 1 ].date ] );\n        // hacky hacky hacky :(\n        y.domain( [ 0, d3.max( data, function( d ) { return d.value; } ) + 700 ] );\n\n        svg.append( \'g\' )\n            .attr( \'class\', \'lineChart--xAxisTicks\' )\n            .attr( \'transform\', \'translate(\' + detailWidth / 2 + \',\' + height + \')\' )\n            .call( xAxisTicks );\n\n        svg.append( \'g\' )\n            .attr( \'class\', \'lineChart--xAxis\' )\n            .attr( \'transform\', \'translate(\' + detailWidth / 2 + \',\' + ( height + 7 ) + \')\' )\n            .call( xAxis );\n\n        svg.append( \'g\' )\n          .attr( \'class\', \'lineChart--yAxisTicks\' )\n          .call( yAxisTicks );\n\n        // Add the line path.\n        svg.append( \'path\' )\n            .datum( startData )\n            .attr( \'class\', \'lineChart--areaLine\' )\n            .attr( \'d\', line )\n            .transition()\n            .duration( DURATION )\n            .delay( DURATION / 2 )\n            .attrTween( \'d\', tween( data, line ) )\n            .each( \'end\', function() {\n              drawCircles( data );\n            } );\n\n\n        // Add the area path.\n        svg.append( \'path\' )\n            .datum( startData )\n            .attr( \'class\', \'lineChart--area\' )\n            .attr( \'d\', area )\n            .transition()\n            .duration( DURATION )\n            .attrTween( \'d\', tween( data, area ) );\n\n        // Helper functions!!!\n        function drawCircle( datum, index ) {\n          circleContainer.datum( datum )\n                        .append( \'circle\' )\n                        .attr( \'class\', \'lineChart--circle\' )\n                        .attr( \'r\', 0 )\n                        .attr(\n                          \'cx\',\n                          function( d ) {\n                            return x( d.date ) + detailWidth / 2;\n                          }\n                        )\n                        .attr(\n                          \'cy\',\n                          function( d ) {\n                            return y( d.value );\n                          }\n                        )\n                        .on( \'mouseenter\', function( d ) {\n                          d3.select( this )\n                            .attr(\n                              \'class\',\n                              \'lineChart--circle lineChart--circle__highlighted\'\n                            )\n                            .attr( \'r\', 7 );\n\n                            d.active = true;\n\n                            showCircleDetail( d );\n                        } )\n                        .on( \'mouseout\', function( d ) {\n                          d3.select( this )\n                            .attr(\n                              \'class\',\n                              \'lineChart--circle\'\n                            )\n                            .attr( \'r\', 6 );\n\n                          if ( d.active ) {\n                            hideCircleDetails();\n\n                            d.active = false;\n                          }\n                        } )\n                        .on( \'click touch\', function( d ) {\n                          if ( d.active ) {\n                            showCircleDetail( d )\n                          } else {\n                            hideCircleDetails();\n                          }\n                        } )\n                        .transition()\n                        .delay( DURATION / 10 * index )\n                        .attr( \'r\', 6 );\n        }\n\n        function drawCircles( data ) {\n          circleContainer = svg.append( \'g\' );\n\n          data.forEach( function( datum, index ) {\n            drawCircle( datum, index );\n          } );\n        }\n\n        function hideCircleDetails() {\n          circleContainer.selectAll( \'.lineChart--bubble\' )\n                          .remove();\n        }\n\n        function showCircleDetail( data ) {\n          var details = circleContainer.append( \'g\' )\n                            .attr( \'class\', \'lineChart--bubble\' )\n                            .attr(\n                              \'transform\',\n                              function() {\n                                var result = \'translate(\';\n\n                                result += x( data.date );\n                                result += \', \';\n                                result += y( data.value ) - detailHeight - detailMargin;\n                                result += \')\';\n\n                                return result;\n                              }\n                            );\n\n          details.append( \'path\' )\n                  .attr( \'d\', \'M2.99990186,0 C1.34310181,0 0,1.34216977 0,2.99898218 L0,47.6680579 C0,49.32435 1.34136094,50.6670401 3.00074875,50.6670401 L44.4095996,50.6670401 C48.9775098,54.3898926 44.4672607,50.6057129 49,54.46875 C53.4190918,50.6962891 49.0050244,54.4362793 53.501875,50.6670401 L94.9943116,50.6670401 C96.6543075,50.6670401 98,49.3248703 98,47.6680579 L98,2.99898218 C98,1.34269006 96.651936,0 95.0000981,0 L2.99990186,0 Z M2.99990186,0\' )\n                  .attr( \'width\', detailWidth )\n                  .attr( \'height\', detailHeight );\n\n          var text = details.append( \'text\' )\n                            .attr( \'class\', \'lineChart--bubble--text\' );\n\n          text.append( \'tspan\' )\n              .attr( \'class\', \'lineChart--bubble--label\' )\n              .attr( \'x\', detailWidth / 2 )\n              .attr( \'y\', detailHeight / 3 )\n              .attr( \'text-anchor\', \'middle\' )\n              .text( data.label );\n\n          text.append( \'tspan\' )\n              .attr( \'class\', \'lineChart--bubble--value\' )\n              .attr( \'x\', detailWidth / 2 )\n              .attr( \'y\', detailHeight / 4 * 3 )\n              .attr( \'text-anchor\', \'middle\' )\n              .text( data.value );\n        }\n\n        function tween( b, callback ) {\n          return function( a ) {\n            var i = d3.interpolateArray( a, b );\n\n            return function( t ) {\n              return callback( i ( t ) );\n            };\n          };\n        }\n      },\n      data: [\n          {\n            date  : \'2006-02-22\',\n            label : \'foo\',\n            value : 950\n          },\n          {\n            date  : \'2006-08-22\',\n            label : \'bar\',\n            value : 1000\n          },\n          {\n            date  : \'2007-01-11\',\n            label : \'baz\',\n            value : 700\n          },\n          {\n            date  : \'2008-10-01\',\n            label : \'boing\',\n            value : 534\n          },\n          {\n            date  : \'2009-02-24\',\n            label : \'loool\',\n            value : 1423\n          },\n          {\n            date  : \'2010-12-30\',\n            label : \'YEAH\',\n            value : 1222\n          },\n          {\n            date  : \'2011-05-15\',\n            label : \'Hurray\',\n            value : 948\n          },\n          {\n            date  : \'2012-04-02\',\n            label : \'WTF\',\n            value : 1938\n          },\n          {\n            date  : \'2013-08-19\',\n            label : \'OMG\',\n            value : 1245\n          },\n          {\n            date  : \'2013-11-11\',\n            label : \'ROFL\',\n            value : 888\n          }\n        ],\n      didInsertElement: function(){\n        this.draw();\n      }\n    });\n  });//# sourceURL=selby/components/line-chart.js");

;eval("define(\"selby/config/environments/development\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = {\"modulePrefix\":\"selby\",\"environment\":\"development\",\"baseURL\":\"/\",\"locationType\":\"auto\",\"EmberENV\":{\"FEATURES\":{}},\"APP\":{\"LOG_ACTIVE_GENERATION\":true,\"LOG_VIEW_LOOKUPS\":true}};\n  });//# sourceURL=selby/config/environments/development.js");

;eval("define(\"selby/config/environments/test\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = {\"modulePrefix\":\"selby\",\"environment\":\"test\",\"baseURL\":\"/\",\"locationType\":\"auto\",\"EmberENV\":{\"FEATURES\":{}},\"APP\":{\"LOG_ACTIVE_GENERATION\":false,\"LOG_VIEW_LOOKUPS\":false,\"rootElement\":\"#ember-testing\"}};\n  });//# sourceURL=selby/config/environments/test.js");

;eval("define(\"selby/controllers/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Controller.extend({\n      username: \'Guest\' + Math.floor(Math.random() * (9999 - 1000)) + 1000,\n      connection: false,\n      typing: false,\n      lastTypingTime: null,\n      init: function(){\n        var FADE_TIME = 150; // ms\n        var TYPING_TIMER_LENGTH = 400; // ms\n        var COLORS = [\n          \'#e21400\', \'#91580f\', \'#f8a700\', \'#f78b00\',\n          \'#58dc00\', \'#287b00\', \'#a8f07a\', \'#4ae8c4\',\n          \'#3b88eb\', \'#3824aa\', \'#a700ff\', \'#d300e7\'\n        ];\n\n        // Initialize varibles\n        var $window = $(window);\n        var $usernameInput = $(\'.usernameInput\'); // Input for username\n        var $messages = $(\'.messages\'); // Messages area\n        var $inputMessage = $(\'.inputMessage\'); // Input message input box\n\n        var $loginPage = $(\'.login.page\'); // The login page\n        var $chatPage = $(\'.chat.page\'); // The chatroom page\n\n        // Prompt for setting a username\n        var username = function(){\n          return this.get(\'username\');\n        };\n        var connected = function(){\n          return this.get(\'connected\');\n        };\n        var typing = function(){\n          return this.get(\'typing\');\n        };\n        var lastTypingTime = function(){\n          return this.get(\'lastTypingTime\');\n        };\n        var $currentInput = $usernameInput.focus();\n\n        var socket = io();\n\n        function addParticipantsMessage (data) {\n          var message = \'\';\n          if (data.numUsers === 1) {\n            message += \"there\'s 1 participant\";\n          } else {\n            message += \"there are \" + data.numUsers + \" participants\";\n          }\n          log(message);\n        }\n\n        // Sets the client\'s username\n        function setUsername () {\n          username = cleanInput($usernameInput.val().trim());\n\n          // If the username is valid\n          if (username) {\n            $loginPage.fadeOut();\n            $chatPage.show();\n            $loginPage.off(\'click\');\n            $currentInput = $inputMessage.focus();\n\n            // Tell the server your username\n            socket.emit(\'add user\', username);\n          }\n        }\n\n        // Sends a chat message\n        function sendMessage () {\n          var message = $inputMessage.val();\n          // Prevent markup from being injected into the message\n          message = cleanInput(message);\n          // if there is a non-empty message and a socket connection\n          if (message && connected) {\n            $inputMessage.val(\'\');\n            addChatMessage({\n              username: username,\n              message: message\n            });\n            // tell server to execute \'new message\' and send along one parameter\n            socket.emit(\'new message\', message);\n          }\n        }\n\n        // Log a message\n        function log (message, options) {\n          var $el = $(\'<li>\').addClass(\'log\').text(message);\n          addMessageElement($el, options);\n        }\n\n        // Adds the visual chat message to the message list\n        function addChatMessage (data, options) {\n          // Don\'t fade the message in if there is an \'X was typing\'\n          var $typingMessages = getTypingMessages(data);\n          options = options || {};\n          if ($typingMessages.length !== 0) {\n            options.fade = false;\n            $typingMessages.remove();\n          }\n\n          var $usernameDiv = $(\'<span class=\"username\"/>\')\n            .text(data.username)\n            .css(\'color\', getUsernameColor(data.username));\n          var $messageBodyDiv = $(\'<span class=\"messageBody\">\')\n            .text(data.message);\n\n          var typingClass = data.typing ? \'typing\' : \'\';\n          var $messageDiv = $(\'<li class=\"message\"/>\')\n            .data(\'username\', data.username)\n            .addClass(typingClass)\n            .append($usernameDiv, $messageBodyDiv);\n\n          addMessageElement($messageDiv, options);\n        }\n\n        // Adds the visual chat typing message\n        function addChatTyping (data) {\n          data.typing = true;\n          data.message = \'is typing\';\n          addChatMessage(data);\n        }\n\n        // Removes the visual chat typing message\n        function removeChatTyping (data) {\n          getTypingMessages(data).fadeOut(function () {\n            $(this).remove();\n          });\n        }\n\n        // Adds a message element to the messages and scrolls to the bottom\n        // el - The element to add as a message\n        // options.fade - If the element should fade-in (default = true)\n        // options.prepend - If the element should prepend\n        //   all other messages (default = false)\n        function addMessageElement (el, options) {\n          var $el = $(el);\n\n          // Setup default options\n          if (!options) {\n            options = {};\n          }\n          if (typeof options.fade === \'undefined\') {\n            options.fade = true;\n          }\n          if (typeof options.prepend === \'undefined\') {\n            options.prepend = false;\n          }\n\n          // Apply options\n          if (options.fade) {\n            $el.hide().fadeIn(FADE_TIME);\n          }\n          if (options.prepend) {\n            $messages.prepend($el);\n          } else {\n            $messages.append($el);\n          }\n          $messages[0].scrollTop = $messages[0].scrollHeight;\n        }\n\n        // Prevents input from having injected markup\n        function cleanInput (input) {\n          return $(\'<div/>\').text(input).text();\n        }\n\n        // Updates the typing event\n        function updateTyping () {\n          if (connected) {\n            if (!typing) {\n              typing = true;\n              socket.emit(\'typing\');\n            }\n            lastTypingTime = (new Date()).getTime();\n\n            setTimeout(function () {\n              var typingTimer = (new Date()).getTime();\n              var timeDiff = typingTimer - lastTypingTime;\n              if (timeDiff >= TYPING_TIMER_LENGTH && typing) {\n                socket.emit(\'stop typing\');\n                typing = false;\n              }\n            }, TYPING_TIMER_LENGTH);\n          }\n        }\n\n        // Gets the \'X is typing\' messages of a user\n        function getTypingMessages (data) {\n          return $(\'.typing.message\').filter(function (i) {\n            return $(this).data(\'username\') === data.username;\n          });\n        }\n\n        // Gets the color of a username through our hash function\n        function getUsernameColor (username) {\n          // Compute hash code\n          var hash = 7;\n          for (var i = 0; i < username.length; i++) {\n             hash = username.charCodeAt(i) + (hash << 5) - hash;\n          }\n          // Calculate color\n          var index = Math.abs(hash % COLORS.length);\n          return COLORS[index];\n        }\n\n        // Keyboard events\n\n        $window.keydown(function (event) {\n          // Auto-focus the current input when a key is typed\n          if (!(event.ctrlKey || event.metaKey || event.altKey)) {\n            $currentInput.focus();\n          }\n          // When the client hits ENTER on their keyboard\n          if (event.which === 13) {\n            if (username) {\n              sendMessage();\n              socket.emit(\'stop typing\');\n              typing = false;\n            } else {\n              setUsername();\n            }\n          }\n        });\n\n        $inputMessage.on(\'input\', function() {\n          updateTyping();\n        });\n\n        // Click events\n\n        // Focus input when clicking anywhere on login page\n        $loginPage.click(function () {\n          $currentInput.focus();\n        });\n\n        // Focus input when clicking on the message input\'s border\n        $inputMessage.click(function () {\n          $inputMessage.focus();\n        });\n\n        // Socket events\n\n        // Whenever the server emits \'login\', log the login message\n        socket.on(\'login\', function (data) {\n          connected = true;\n          // Display the welcome message\n          var message = \"Welcome to Socket.IO Chat – \";\n          log(message, {\n            prepend: true\n          });\n          addParticipantsMessage(data);\n        });\n\n        // Whenever the server emits \'new message\', update the chat body\n        socket.on(\'new message\', function (data) {\n          addChatMessage(data);\n        });\n\n        // Whenever the server emits \'user joined\', log it in the chat body\n        socket.on(\'user joined\', function (data) {\n          log(data.username + \' joined\');\n          addParticipantsMessage(data);\n        });\n\n        // Whenever the server emits \'user left\', log it in the chat body\n        socket.on(\'user left\', function (data) {\n          log(data.username + \' left\');\n          addParticipantsMessage(data);\n          removeChatTyping(data);\n        });\n\n        // Whenever the server emits \'typing\', show the typing message\n        socket.on(\'typing\', function (data) {\n          addChatTyping(data);\n        });\n\n        // Whenever the server emits \'stop typing\', kill the typing message\n        socket.on(\'stop typing\', function (data) {\n          removeChatTyping(data);\n        });\n      }\n    });\n  });//# sourceURL=selby/controllers/application.js");

;eval("define(\"selby/controllers/stats\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var DURATION = 1500;\n    var DELAY    = 500;\n\n    __exports__[\"default\"] = Ember.Controller.extend({});\n  });//# sourceURL=selby/controllers/stats.js");

;eval("define(\"selby/router\", \n  [\"ember\",\"selby/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: config.locationType\n    });\n\n    Router.map(function() {\n      this.route(\'index\', {path: \'/\'});\n      this.route(\'stats\', {path: \'/stats\'});\n    });\n\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=selby/router.js");

;eval("define(\"selby/routes/stats\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Route.extend({\n      data: [\n          {\n            date  : \'2006-02-22\',\n            label : \'foo\',\n            value : 950\n          },\n          {\n            date  : \'2006-08-22\',\n            label : \'bar\',\n            value : 1000\n          },\n          {\n            date  : \'2007-01-11\',\n            label : \'baz\',\n            value : 700\n          },\n          {\n            date  : \'2008-10-01\',\n            label : \'boing\',\n            value : 534\n          },\n          {\n            date  : \'2009-02-24\',\n            label : \'loool\',\n            value : 1423\n          },\n          {\n            date  : \'2010-12-30\',\n            label : \'YEAH\',\n            value : 1222\n          },\n          {\n            date  : \'2011-05-15\',\n            label : \'Hurray\',\n            value : 948\n          },\n          {\n            date  : \'2012-04-02\',\n            label : \'WTF\',\n            value : 1938\n          },\n          {\n            date  : \'2013-08-19\',\n            label : \'OMG\',\n            value : 1245\n          },\n          {\n            date  : \'2013-11-11\',\n            label : \'ROFL\',\n            value : 888\n          }\n        ]\n    });\n  });//# sourceURL=selby/routes/stats.js");

;eval("define(\"selby/templates/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      \n      data.buffer.push(\"Server Stats\");\n      }\n\n      data.buffer.push(\"<nav class=\\\"navbar navbar-default navbar-fixed-top\\\" role=\\\"navigation\\\" style=\\\"font-size: 18px; padding: 0 5em;\\\">\\n  <div class=\\\"navbar-header\\\">\\n    <a class=\\\"navbar-brand logo\\\" href=\\\"#\\\">selby.io</a>\\n    <button type=\\\"button\\\" class=\\\"navbar-toggle collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse\\\">\\n      <span class=\\\"sr-only\\\">Toggle navigation</span>\\n      <span class=\\\"icon-bar\\\"></span>\\n      <span class=\\\"icon-bar\\\"></span>\\n      <span class=\\\"icon-bar\\\"></span>\\n    </button>\\n  </div>\\n  <div class=\\\"nav-spy navbar-collapse collapse\\\">\\n    <ul class=\\\"nav navbar-nav navbar-right\\\" role=\\\"tablist\\\">\\n        <li><a href=\\\"#todo\\\">Todo</a></li>\\n        <li><a href=\\\"#projects\\\">Projects</a></li>\\n        <li class=\\\"dropdown\\\">\\n          <a href=\\\"#\\\" class=\\\"dropdown-toggle\\\" data-toggle=\\\"dropdown\\\"><span class=\\\"icon ion-android-information\\\" style=\\\"font-size: 18px; margin: 0 5px 0 10px;\\\"></span><span class=\\\"caret\\\" style=\\\"font-size: 18px;\\\"></a>\\n          <ul class=\\\"dropdown-menu\\\" role=\\\"menu\\\">\\n            <li><a href=\\\"#\\\">C.V.</a></li>\\n            <li>\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"stats\", options) : helperMissing.call(depth0, \"link-to\", \"stats\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\\n            <li><a href=\\\"https://github.com/selbyk\\\">Github</a></li>\\n            <li><a href=\\\"https://osrc.dfm.io/selbyk/\\\">Osrc</a></li>\\n            <li class=\\\"divider\\\"></li>\\n            <li><a href=\\\"#footer\\\">Credits</a></li>\\n          </ul>\\n        </li>\\n    </ul>\\n  </div>\\n</nav>\\n<!-- Brand and toggle get grouped for better mobile display -->\\n\\n\");\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n<div id=\\\"footer\\\" style=\\\"padding: 0;padding-top: 200px;margin: 0 auto 0 auto;\\\">\\n  <div class=\\\"container\\\" style=\\\"padding: 0;margin: 0 auto 0 auto;height: 100vh;\\\">\\n    <div class=\\\"row\\\" style=\\\"padding: 0;margin: 0;height: 34vh;\\\">\\n      <div class=\'col-xs-12 text-center\' style=\\\"padding: 0;margin: 0;height: 34vh;\\\">\\n        <p style=\\\"padding: 0;margin: 0;height: 17vh;\\\">...as simple as possible, but not simpler.</p>\\n        <p style=\\\"height: 17vh;padding: 0;margin: 0;\\\">- Albert Einstein</p>\\n      </div>\\n    </div>\\n    <div class=\\\"row row-centered text-center\\\" style=\\\"height: 31vh;padding: 0;margin: 0;\\\">\\n      <a href=\\\"http://www.linkedin.com/pub/selby-kendrick/50/289/650\\\" alt=\\\"LinkedIn\\\">\\n        <span class=\\\"col-xs-3 col-centered text-center\\\">\\n          <h1 style=\\\"padding: 0;margin: 0;\\\"><i class=\\\"icon ion-social-linkedin\\\"></i></h1>\\n          <h4>LinkedIn</h4>\\n        </span>\\n      </a>\\n      <a href=\\\"https://github.com/selbyk\\\" alt=\\\"GitHub\\\">\\n        <span class=\\\"col-xs-3 col-centered text-center\\\">\\n          <h1 style=\\\"padding: 0;margin: 0;\\\"><i class=\\\"icon ion-social-github\\\"></i></h1>\\n          <h4>GitHub</h4>\\n        </span>\\n      </a>\\n      <a href=\\\"http://www.last.fm/user/n344853835\\\" alt=\\\"Lastfm\\\">\\n        <span class=\\\"col-xs-3 col-centered text-center\\\">\\n          <h1 style=\\\"padding: 0;margin: 0;\\\"><i class=\\\"icon ion-headphone\\\"></i></h1>\\n          <h4>Lastfm</h4>\\n        </span>\\n      </a>\\n      <a href=\\\"mailto:selby.kendrick@gmail.com\\\" alt=\\\"E-mail Me\\\">\\n        <span class=\\\"col-xs-3 col-centered text-center\\\">\\n          <h1 style=\\\"padding: 0;margin: 0;\\\"><i class=\\\"icon ion-email\\\"></i></h1>\\n          <h4>E-mail Me</h4>\\n        </span>\\n      </a>\\n    </div>\\n    <div class=\\\"row\\\" style=\\\"height: 34vh;padding: 0;margin: 0;\\\">\\n      <h4 class=\\\"text-center\\\" style=\\\"height: 17vh;padding: 0;margin: 0;\\\">&copy 2014 Selby Kendrick</h4>\\n      <p class=\\\"text-center\\\" style=\\\"height: 17vh;padding: 0;margin: 0;\\\">You can find the source to this page and some of my other projects on <a href=\\\"https://github.com/selbyk\\\">GitHub</a>.</p>\\n    </div>\\n  </div>\\n</div>\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=selby/templates/application.js");

;eval("define(\"selby/templates/components/line-chart\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      \n\n\n      data.buffer.push(\"<div class=\\\"drop container dark\\\" id=\\\"todo\\\">\\n  <div class=\\\"page-header\\\">\\n    <h2>Loadavg</h1>\\n    <p class=\\\"lead\\\">Server load in 1, 5, and 15 minut intervals</p>\\n  </div>\\n  <ul>\\n    <li class=\\\"chart\\\">\\n      <div id=\\\"lineChart\\\">\\n        <svg id=\\\"lineChartSVG\\\" class=\\\"lineChart--svg\\\">\\n          <defs>\\n            <linearGradient id=\\\"lineChart--gradientBackgroundArea\\\" x1=\\\"0\\\" x2=\\\"0\\\" y1=\\\"0\\\" y2=\\\"1\\\">\\n              <stop class=\\\"lineChart--gradientBackgroundArea--top\\\" offset=\\\"0%\\\" />\\n              <stop class=\\\"lineChart--gradientBackgroundArea--bottom\\\" offset=\\\"100%\\\" />\\n            </linearGradient>\\n          </defs>\\n        </svg>\\n      </div>\\n    </li>\\n  </ul>\\n</div>\\n\");\n      \n    });\n  });//# sourceURL=selby/templates/components/line-chart.js");

;eval("define(\"selby/templates/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      \n\n\n      data.buffer.push(\"\\n<div class=\\\"drop container jumbotron dark\\\">\\n  <h1>Hello, world!</h1>\\n  <p>This is a playground for ideas and a showchase of my work.</p>\\n  <p>It is a work in progress, so be careful because it\'s\\n    very possible I may crash your broswer by mistake.</p>\\n  <p>Hope you find something interesting, and if I do crash your browser\\n    let me know so I can fix it.</p>\\n  <p>Thanks for visiting. =)</p>\\n  <p>-Selby</p>\\n</div>\\n\\n<div class=\\\"drop container dark\\\" id=\\\"todo\\\">\\n  <div class=\\\"page-header\\\">\\n    <h2>Todo</h1>\\n  </div>\\n  <ul>\\n    <li><s>Add a project</s></li>\\n    <li>Add another</li>\\n  </ul>\\n</div>\\n\\n<div class=\\\"drop container dark\\\" id=\\\"projects\\\">\\n  <div class=\\\"page-header\\\">\\n    <h2>Projects</h1>\\n  </div>\\n  <ul>\\n    <li><a href=\\\"https://lsu-scheduler.herokuapp.com\\\">A Project</a></li>\\n  </ul>\\n</div>\\n\");\n      \n    });\n  });//# sourceURL=selby/templates/index.js");

;eval("define(\"selby/templates/stats\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1;\n\n\n      stack1 = helpers._triageMustache.call(depth0, \"line-chart\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=selby/templates/stats.js");

;eval("define(\"selby/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'app.js should pass jshint\', function() { \n      ok(false, \'app.js should pass jshint.\\napp.js: line 1, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\napp.js: line 2, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\napp.js: line 3, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\napp.js: line 4, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\napp.js: line 16, col 1, \\\'export\\\' is only available in ES6 (use esnext option).\\n\\n5 errors\'); \n    });\n  });//# sourceURL=selby/tests/app.jshint.js");

;eval("define(\"selby/tests/components/line-chart.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - components\');\n    test(\'components/line-chart.js should pass jshint\', function() { \n      ok(false, \'components/line-chart.js should pass jshint.\\ncomponents/line-chart.js: line 1, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\ncomponents/line-chart.js: line 6, col 1, \\\'export\\\' is only available in ES6 (use esnext option).\\ncomponents/line-chart.js: line 163, col 46, Missing semicolon.\\n\\n3 errors\'); \n    });\n  });//# sourceURL=selby/tests/components/line-chart.jshint.js");

;eval("define(\"selby/tests/controllers/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/application.js should pass jshint\', function() { \n      ok(false, \'controllers/application.js should pass jshint.\\ncontrollers/application.js: line 1, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\ncontrollers/application.js: line 3, col 1, \\\'export\\\' is only available in ES6 (use esnext option).\\n\\n2 errors\'); \n    });\n  });//# sourceURL=selby/tests/controllers/application.jshint.js");

;eval("define(\"selby/tests/controllers/stats.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/stats.js should pass jshint\', function() { \n      ok(false, \'controllers/stats.js should pass jshint.\\ncontrollers/stats.js: line 1, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\ncontrollers/stats.js: line 6, col 1, \\\'export\\\' is only available in ES6 (use esnext option).\\n\\n2 errors\'); \n    });\n  });//# sourceURL=selby/tests/controllers/stats.jshint.js");

;eval("define(\"selby/tests/helpers/resolver\", \n  [\"ember/resolver\",\"selby/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=selby/tests/helpers/resolver.js");

;eval("define(\"selby/tests/helpers/start-app\", \n  [\"ember\",\"selby/app\",\"selby/router\",\"selby/config/environments/test\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Router.reopen({\n        location: \'none\'\n      });\n\n      Ember.run(function() {\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      App.reset(); // this shouldn\'t be needed, i want to be able to \"start an app at a specific URL\"\n\n      return App;\n    }\n  });//# sourceURL=selby/tests/helpers/start-app.js");

;eval("define(\"selby/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'router.js should pass jshint\', function() { \n      ok(false, \'router.js should pass jshint.\\nrouter.js: line 1, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\nrouter.js: line 2, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\nrouter.js: line 13, col 1, \\\'export\\\' is only available in ES6 (use esnext option).\\n\\n3 errors\'); \n    });\n  });//# sourceURL=selby/tests/router.jshint.js");

;eval("define(\"selby/tests/routes/stats.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/stats.js should pass jshint\', function() { \n      ok(false, \'routes/stats.js should pass jshint.\\nroutes/stats.js: line 1, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\nroutes/stats.js: line 3, col 1, \\\'export\\\' is only available in ES6 (use esnext option).\\n\\n2 errors\'); \n    });\n  });//# sourceURL=selby/tests/routes/stats.jshint.js");

;eval("define(\"selby/tests/selby/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - selby/tests/helpers\');\n    test(\'selby/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'selby/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=selby/tests/selby/tests/helpers/resolver.jshint.js");

;eval("define(\"selby/tests/selby/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - selby/tests/helpers\');\n    test(\'selby/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'selby/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=selby/tests/selby/tests/helpers/start-app.jshint.js");

;eval("define(\"selby/tests/selby/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - selby/tests\');\n    test(\'selby/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'selby/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=selby/tests/selby/tests/test-helper.jshint.js");

;eval("define(\"selby/tests/selby/tests/unit/components/line-chart-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - selby/tests/unit/components\');\n    test(\'selby/tests/unit/components/line-chart-test.js should pass jshint\', function() { \n      ok(true, \'selby/tests/unit/components/line-chart-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=selby/tests/selby/tests/unit/components/line-chart-test.jshint.js");

;eval("define(\"selby/tests/selby/tests/unit/controllers/application-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - selby/tests/unit/controllers\');\n    test(\'selby/tests/unit/controllers/application-test.js should pass jshint\', function() { \n      ok(true, \'selby/tests/unit/controllers/application-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=selby/tests/selby/tests/unit/controllers/application-test.jshint.js");

;eval("define(\"selby/tests/selby/tests/unit/controllers/stats-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - selby/tests/unit/controllers\');\n    test(\'selby/tests/unit/controllers/stats-test.js should pass jshint\', function() { \n      ok(true, \'selby/tests/unit/controllers/stats-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=selby/tests/selby/tests/unit/controllers/stats-test.jshint.js");

;eval("define(\"selby/tests/selby/tests/unit/routes/stats-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - selby/tests/unit/routes\');\n    test(\'selby/tests/unit/routes/stats-test.js should pass jshint\', function() { \n      ok(true, \'selby/tests/unit/routes/stats-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=selby/tests/selby/tests/unit/routes/stats-test.jshint.js");

;eval("define(\"selby/tests/test-helper\", \n  [\"selby/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\n    if (QUnit.urlParams.nocontainer) {\n      document.getElementById(\'ember-testing-container\').style.visibility = \'hidden\';\n    } else {\n      document.getElementById(\'ember-testing-container\').style.visibility = \'visible\';\n    }\n  });//# sourceURL=selby/tests/test-helper.js");

;eval("define(\"selby/tests/unit/components/line-chart-test\", \n  [\"ember-qunit\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var moduleForComponent = __dependency1__.moduleForComponent;\n    var test = __dependency1__.test;\n\n    moduleForComponent(\'line-chart\', \'LineChartComponent\', {\n      // specify the other units that are required for this test\n      // needs: [\'component:foo\', \'helper:bar\']\n    });\n\n    test(\'it renders\', function() {\n      expect(2);\n\n      // creates the component instance\n      var component = this.subject();\n      equal(component._state, \'preRender\');\n\n      // appends the component to the page\n      this.append();\n      equal(component._state, \'inDOM\');\n    });\n  });//# sourceURL=selby/tests/unit/components/line-chart-test.js");

;eval("define(\"selby/tests/unit/controllers/application-test\", \n  [\"ember-qunit\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var moduleFor = __dependency1__.moduleFor;\n    var test = __dependency1__.test;\n\n    moduleFor(\'controller:application\', \'ApplicationController\', {\n      // Specify the other units that are required for this test.\n      // needs: [\'controller:foo\']\n    });\n\n    // Replace this with your real tests.\n    test(\'it exists\', function() {\n      var controller = this.subject();\n      ok(controller);\n    });\n  });//# sourceURL=selby/tests/unit/controllers/application-test.js");

;eval("define(\"selby/tests/unit/controllers/stats-test\", \n  [\"ember-qunit\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var moduleFor = __dependency1__.moduleFor;\n    var test = __dependency1__.test;\n\n    moduleFor(\'controller:stats\', \'StatsController\', {\n      // Specify the other units that are required for this test.\n      // needs: [\'controller:foo\']\n    });\n\n    // Replace this with your real tests.\n    test(\'it exists\', function() {\n      var controller = this.subject();\n      ok(controller);\n    });\n  });//# sourceURL=selby/tests/unit/controllers/stats-test.js");

;eval("define(\"selby/tests/unit/routes/stats-test\", \n  [\"ember-qunit\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var moduleFor = __dependency1__.moduleFor;\n    var test = __dependency1__.test;\n\n    moduleFor(\'route:stats\', \'StatsRoute\', {\n      // Specify the other units that are required for this test.\n      // needs: [\'controller:foo\']\n    });\n\n    test(\'it exists\', function() {\n      var route = this.subject();\n      ok(route);\n    });\n  });//# sourceURL=selby/tests/unit/routes/stats-test.js");
