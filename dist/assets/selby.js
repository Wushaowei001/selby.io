eval("//# sourceURL=assets/ember-cli/loader.js");

;eval("define(\"selby/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"selby/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix,\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, config.modulePrefix);\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=selby/app.js");

;eval("define(\"selby/config/environment\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = {\"modulePrefix\":\"selby\",\"environment\":\"development\",\"baseURL\":\"/\",\"locationType\":\"auto\",\"EmberENV\":{\"FEATURES\":{}},\"APP\":{\"LOG_ACTIVE_GENERATION\":true,\"LOG_VIEW_LOOKUPS\":true}};\n  });//# sourceURL=selby/config/environment.js");

;eval("define(\"selby/config/environments/development\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = {\"modulePrefix\":\"selby\",\"environment\":\"development\",\"baseURL\":\"/\",\"locationType\":\"auto\",\"EmberENV\":{\"FEATURES\":{}},\"APP\":{\"LOG_ACTIVE_GENERATION\":true,\"LOG_VIEW_LOOKUPS\":true}};\n  });//# sourceURL=selby/config/environments/development.js");

;eval("define(\"selby/config/environments/test\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = {\"modulePrefix\":\"selby\",\"environment\":\"test\",\"baseURL\":\"/\",\"locationType\":\"auto\",\"EmberENV\":{\"FEATURES\":{}},\"APP\":{\"LOG_ACTIVE_GENERATION\":false,\"LOG_VIEW_LOOKUPS\":false,\"rootElement\":\"#ember-testing\"}};\n  });//# sourceURL=selby/config/environments/test.js");

;eval("define(\"selby/controllers/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Controller.extend({\n      username: \'Guest\' + Math.floor(Math.random() * (9999 - 1000)) + 1000,\n      connection: false,\n      typing: false,\n      lastTypingTime: null,\n      init: function(){\n        var FADE_TIME = 150; // ms\n        var TYPING_TIMER_LENGTH = 400; // ms\n        var COLORS = [\n          \'#e21400\', \'#91580f\', \'#f8a700\', \'#f78b00\',\n          \'#58dc00\', \'#287b00\', \'#a8f07a\', \'#4ae8c4\',\n          \'#3b88eb\', \'#3824aa\', \'#a700ff\', \'#d300e7\'\n        ];\n\n        // Initialize varibles\n        var $window = $(window);\n        var $usernameInput = $(\'.usernameInput\'); // Input for username\n        var $messages = $(\'.messages\'); // Messages area\n        var $inputMessage = $(\'.inputMessage\'); // Input message input box\n\n        var $loginPage = $(\'.login.page\'); // The login page\n        var $chatPage = $(\'.chat.page\'); // The chatroom page\n\n        // Prompt for setting a username\n        var username = function(){\n          return this.get(\'username\');\n        };\n        var connected = function(){\n          return this.get(\'connected\');\n        };\n        var typing = function(){\n          return this.get(\'typing\');\n        };\n        var lastTypingTime = function(){\n          return this.get(\'lastTypingTime\');\n        };\n        var $currentInput = $usernameInput.focus();\n\n        var socket = io();\n\n        function addParticipantsMessage (data) {\n          var message = \'\';\n          if (data.numUsers === 1) {\n            message += \"there\'s 1 participant\";\n          } else {\n            message += \"there are \" + data.numUsers + \" participants\";\n          }\n          log(message);\n        }\n\n        // Sets the client\'s username\n        function setUsername () {\n          username = cleanInput($usernameInput.val().trim());\n\n          // If the username is valid\n          if (username) {\n            $loginPage.fadeOut();\n            $chatPage.show();\n            $loginPage.off(\'click\');\n            $currentInput = $inputMessage.focus();\n\n            // Tell the server your username\n            socket.emit(\'add user\', username);\n          }\n        }\n\n        // Sends a chat message\n        function sendMessage () {\n          var message = $inputMessage.val();\n          // Prevent markup from being injected into the message\n          message = cleanInput(message);\n          // if there is a non-empty message and a socket connection\n          if (message && connected) {\n            $inputMessage.val(\'\');\n            addChatMessage({\n              username: username,\n              message: message\n            });\n            // tell server to execute \'new message\' and send along one parameter\n            socket.emit(\'new message\', message);\n          }\n        }\n\n        // Log a message\n        function log (message, options) {\n          var $el = $(\'<li>\').addClass(\'log\').text(message);\n          addMessageElement($el, options);\n        }\n\n        // Adds the visual chat message to the message list\n        function addChatMessage (data, options) {\n          // Don\'t fade the message in if there is an \'X was typing\'\n          var $typingMessages = getTypingMessages(data);\n          options = options || {};\n          if ($typingMessages.length !== 0) {\n            options.fade = false;\n            $typingMessages.remove();\n          }\n\n          var $usernameDiv = $(\'<span class=\"username\"/>\')\n            .text(data.username)\n            .css(\'color\', getUsernameColor(data.username));\n          var $messageBodyDiv = $(\'<span class=\"messageBody\">\')\n            .text(data.message);\n\n          var typingClass = data.typing ? \'typing\' : \'\';\n          var $messageDiv = $(\'<li class=\"message\"/>\')\n            .data(\'username\', data.username)\n            .addClass(typingClass)\n            .append($usernameDiv, $messageBodyDiv);\n\n          addMessageElement($messageDiv, options);\n        }\n\n        // Adds the visual chat typing message\n        function addChatTyping (data) {\n          data.typing = true;\n          data.message = \'is typing\';\n          addChatMessage(data);\n        }\n\n        // Removes the visual chat typing message\n        function removeChatTyping (data) {\n          getTypingMessages(data).fadeOut(function () {\n            $(this).remove();\n          });\n        }\n\n        // Adds a message element to the messages and scrolls to the bottom\n        // el - The element to add as a message\n        // options.fade - If the element should fade-in (default = true)\n        // options.prepend - If the element should prepend\n        //   all other messages (default = false)\n        function addMessageElement (el, options) {\n          var $el = $(el);\n\n          // Setup default options\n          if (!options) {\n            options = {};\n          }\n          if (typeof options.fade === \'undefined\') {\n            options.fade = true;\n          }\n          if (typeof options.prepend === \'undefined\') {\n            options.prepend = false;\n          }\n\n          // Apply options\n          if (options.fade) {\n            $el.hide().fadeIn(FADE_TIME);\n          }\n          if (options.prepend) {\n            $messages.prepend($el);\n          } else {\n            $messages.append($el);\n          }\n          $messages[0].scrollTop = $messages[0].scrollHeight;\n        }\n\n        // Prevents input from having injected markup\n        function cleanInput (input) {\n          return $(\'<div/>\').text(input).text();\n        }\n\n        // Updates the typing event\n        function updateTyping () {\n          if (connected) {\n            if (!typing) {\n              typing = true;\n              socket.emit(\'typing\');\n            }\n            lastTypingTime = (new Date()).getTime();\n\n            setTimeout(function () {\n              var typingTimer = (new Date()).getTime();\n              var timeDiff = typingTimer - lastTypingTime;\n              if (timeDiff >= TYPING_TIMER_LENGTH && typing) {\n                socket.emit(\'stop typing\');\n                typing = false;\n              }\n            }, TYPING_TIMER_LENGTH);\n          }\n        }\n\n        // Gets the \'X is typing\' messages of a user\n        function getTypingMessages (data) {\n          return $(\'.typing.message\').filter(function (i) {\n            return $(this).data(\'username\') === data.username;\n          });\n        }\n\n        // Gets the color of a username through our hash function\n        function getUsernameColor (username) {\n          // Compute hash code\n          var hash = 7;\n          for (var i = 0; i < username.length; i++) {\n             hash = username.charCodeAt(i) + (hash << 5) - hash;\n          }\n          // Calculate color\n          var index = Math.abs(hash % COLORS.length);\n          return COLORS[index];\n        }\n\n        // Keyboard events\n\n        $window.keydown(function (event) {\n          // Auto-focus the current input when a key is typed\n          if (!(event.ctrlKey || event.metaKey || event.altKey)) {\n            $currentInput.focus();\n          }\n          // When the client hits ENTER on their keyboard\n          if (event.which === 13) {\n            if (username) {\n              sendMessage();\n              socket.emit(\'stop typing\');\n              typing = false;\n            } else {\n              setUsername();\n            }\n          }\n        });\n\n        $inputMessage.on(\'input\', function() {\n          updateTyping();\n        });\n\n        // Click events\n\n        // Focus input when clicking anywhere on login page\n        $loginPage.click(function () {\n          $currentInput.focus();\n        });\n\n        // Focus input when clicking on the message input\'s border\n        $inputMessage.click(function () {\n          $inputMessage.focus();\n        });\n\n        // Socket events\n\n        // Whenever the server emits \'login\', log the login message\n        socket.on(\'login\', function (data) {\n          connected = true;\n          // Display the welcome message\n          var message = \"Welcome to Socket.IO Chat – \";\n          log(message, {\n            prepend: true\n          });\n          addParticipantsMessage(data);\n        });\n\n        // Whenever the server emits \'new message\', update the chat body\n        socket.on(\'new message\', function (data) {\n          addChatMessage(data);\n        });\n\n        // Whenever the server emits \'user joined\', log it in the chat body\n        socket.on(\'user joined\', function (data) {\n          log(data.username + \' joined\');\n          addParticipantsMessage(data);\n        });\n\n        // Whenever the server emits \'user left\', log it in the chat body\n        socket.on(\'user left\', function (data) {\n          log(data.username + \' left\');\n          addParticipantsMessage(data);\n          removeChatTyping(data);\n        });\n\n        // Whenever the server emits \'typing\', show the typing message\n        socket.on(\'typing\', function (data) {\n          addChatTyping(data);\n        });\n\n        // Whenever the server emits \'stop typing\', kill the typing message\n        socket.on(\'stop typing\', function (data) {\n          removeChatTyping(data);\n        });\n      }\n    });\n  });//# sourceURL=selby/controllers/application.js");

;eval("define(\"selby/router\", \n  [\"ember\",\"selby/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: config.locationType\n    });\n\n    Router.map(function() {\n      this.route(\'index\', {path: \'/\'});\n      this.route(\'stats\', {path: \'/stats\'});\n    });\n\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=selby/router.js");

;eval("define(\"selby/templates/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      \n      data.buffer.push(\"Server Stats\");\n      }\n\n      data.buffer.push(\"<nav class=\\\"navbar navbar-default navbar-fixed-top\\\" role=\\\"navigation\\\">\\n  <div class=\\\"navbar-header\\\">\\n    <a class=\\\"navbar-brand logo\\\" href=\\\"#\\\">selby.io</a>\\n    <button type=\\\"button\\\" class=\\\"navbar-toggle collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse\\\">\\n      <span class=\\\"sr-only\\\">Toggle navigation</span>\\n      <span class=\\\"icon-bar\\\"></span>\\n      <span class=\\\"icon-bar\\\"></span>\\n      <span class=\\\"icon-bar\\\"></span>\\n    </button>\\n  </div>\\n  <div class=\\\"nav-spy navbar-collapse collapse\\\">\\n    <ul class=\\\"nav navbar-nav navbar-right\\\" role=\\\"tablist\\\">\\n        <li><a href=\\\"#projects\\\">Projects</a></li>\\n        <li><a href=\\\"#tools\\\">Tools</a></li>\\n        <li><a href=\\\"#interests\\\">Interests</a></li>\\n        <li><a href=\\\"#chat\\\">Chat</a></li>\\n        <li class=\\\"dropdown\\\">\\n          <a href=\\\"#\\\" class=\\\"dropdown-toggle\\\" data-toggle=\\\"dropdown\\\">More <span class=\\\"caret\\\"></span></a>\\n          <ul class=\\\"dropdown-menu\\\" role=\\\"menu\\\">\\n            <li><a href=\\\"#\\\">C.V.</a></li>\\n            <li>\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"stats\", options) : helperMissing.call(depth0, \"link-to\", \"stats\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\\n            <li><a href=\\\"https://github.com/selbyk\\\">Github</a></li>\\n            <li><a href=\\\"https://osrc.dfm.io/selbyk/\\\">Osrc</a></li>\\n            <li class=\\\"divider\\\"></li>\\n            <li><a href=\\\"#footer\\\">Credits</a></li>\\n          </ul>\\n        </li>\\n    </ul>\\n  </div>\\n</nav>\\n<!-- Brand and toggle get grouped for better mobile display -->\\n\\n\");\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n<div id=\\\"footer\\\" class=\\\"wrapper section black\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\'col-xs-12 text-center\'>\\n          <p>...as simple as possible, but not simpler.</p>\\n          <p>- Albert Einstein</p>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-xs-2 col-xs-offset-1 button linkedin\\\"><a href=\\\"http://www.linkedin.com/pub/selby-kendrick/50/289/650\\\" alt=\\\"LinkedIn\\\"></a></div>\\n      <div class=\\\"col-xs-2 button github\\\"><a href=\\\"https://github.com/selbyk\\\" alt=\\\"Github\\\"></a></div>\\n      <div class=\\\"col-xs-2 button lastfm\\\"><a href=\\\"http://www.last.fm/user/n344853835\\\" alt=\\\"Lastfm\\\"></a></div>\\n      <div class=\\\"col-xs-2 button email\\\"><a href=\\\"mailto:selby.kendrick@gmail.com\\\" alt=\\\"E-mail me\\\"></a></div>\\n    </div>\\n  <h4 class=\\\"text-center\\\">&copy 2014 Selby Kendrick</h4>\\n  <p class=\\\"text-center\\\">You can find the source code to this page and some of my other projects on <a href=\\\"https://github.com/selbyk\\\">GitHub</a></p>\\n  </div>\\n</div>\\n\\n<div id=\\\"chat\\\" class=\\\"section\\\">\\n  <ul class=\\\"pages\\\">\\n    <li class=\\\"chat page\\\">\\n      <div class=\\\"chatArea\\\">\\n        <ul class=\\\"messages\\\"></ul>\\n      </div>\\n      <input class=\\\"inputMessage\\\" placeholder=\\\"Type here...\\\"/>\\n    </li>\\n    <li class=\\\"login page\\\">\\n      <div class=\\\"form\\\">\\n        <h3 class=\\\"title\\\">What\'s your nickname?</h3>\\n        <input class=\\\"usernameInput\\\" type=\\\"text\\\" maxlength=\\\"10\\\" />\\n      </div>\\n    </li>\\n  </ul>\\n</div>\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=selby/templates/application.js");

;eval("define(\"selby/templates/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      \n\n\n      data.buffer.push(\"\\n<div class=\\\"drop container jumbotron dark\\\">\\n  <h1>Hello, world!</h1>\\n  <p>This is a playground for ideas and a showchase of my work.</p>\\n  <p>It is a work in progress, so be careful because it\'s\\n    very possible I may crash your broswer by mistake.</p>\\n  <p>Hope you find something interesting, and if I do crash your browser\\n    let me know so I can fix it.</p>\\n  <p>Thanks for visiting. =)</p>\\n  <p>-Selby</p>\\n</div>\\n\\n<div class=\\\"drop container dark\\\" id=\\\"todo\\\">\\n  <div class=\\\"page-header\\\">\\n    <h2>Todo</h1>\\n  </div>\\n  <ul>\\n    <li><s>Add a project</s></li>\\n    <li>Add another</li>\\n  </ul>\\n</div>\\n\\n<div class=\\\"drop container dark\\\" id=\\\"projects\\\">\\n  <div class=\\\"page-header\\\">\\n    <h2>Projects</h1>\\n  </div>\\n  <ul>\\n    <li><a href=\\\"https://lsu-scheduler.herokuapp.com\\\">A Project</a></li>\\n  </ul>\\n</div>\\n\");\n      \n    });\n  });//# sourceURL=selby/templates/index.js");

;eval("define(\"selby/templates/stats\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      \n\n\n      data.buffer.push(\"<div class=\\\"charts--container\\\">\\n  <ul>\\n    <li class=\\\"chart\\\">\\n      <h3 class=\\\"chart--subHeadline\\\">Chart 1</h3>\\n      <h2 class=\\\"chart--headline\\\">Pie Question Would Go Here</h2>\\n      <div id=\\\"pieChart\\\">\\n        <svg id=\\\"pieChartSVG\\\">\\n          <defs>\\n            <filter id=\'pieChartInsetShadow\'>\\n              <feOffset dx=\'0\' dy=\'0\'/>\\n              <feGaussianBlur stdDeviation=\'3\' result=\'offset-blur\' />\\n              <feComposite operator=\'out\' in=\'SourceGraphic\' in2=\'offset-blur\' result=\'inverse\' />\\n              <feFlood flood-color=\'black\' flood-opacity=\'1\' result=\'color\' />\\n              <feComposite operator=\'in\' in=\'color\' in2=\'inverse\' result=\'shadow\' />\\n              <feComposite operator=\'over\' in=\'shadow\' in2=\'SourceGraphic\' />\\n            </filter>\\n            <filter id=\\\"pieChartDropShadow\\\">\\n              <feGaussianBlur in=\\\"SourceAlpha\\\" stdDeviation=\\\"3\\\" result=\\\"blur\\\" />\\n              <feOffset in=\\\"blur\\\" dx=\\\"0\\\" dy=\\\"3\\\" result=\\\"offsetBlur\\\" />\\n              <feMerge>\\n                <feMergeNode />\\n                <feMergeNode in=\\\"SourceGraphic\\\" />\\n              </feMerge>\\n            </filter>\\n          </defs>\\n        </svg>\\n      </div>\\n    </li>\\n    <li class=\\\"chart\\\">\\n      <h3 class=\\\"chart--subHeadline\\\">Chart 2</h3>\\n      <h2 class=\\\"chart--headline\\\">Area Label Would Go Here</h2>\\n      <div id=\\\"lineChart\\\">\\n        <svg id=\\\"lineChartSVG\\\" class=\\\"lineChart--svg\\\">\\n          <defs>\\n            <linearGradient id=\\\"lineChart--gradientBackgroundArea\\\" x1=\\\"0\\\" x2=\\\"0\\\" y1=\\\"0\\\" y2=\\\"1\\\">\\n              <stop class=\\\"lineChart--gradientBackgroundArea--top\\\" offset=\\\"0%\\\" />\\n              <stop class=\\\"lineChart--gradientBackgroundArea--bottom\\\" offset=\\\"100%\\\" />\\n            </linearGradient>\\n          </defs>\\n        </svg>\\n      </div>\\n    </li>\\n  </ul>\\n</div>\\n<script src=\\\"chart.js\\\"></script>\\n\");\n      \n    });\n  });//# sourceURL=selby/templates/stats.js");

;eval("define(\"selby/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'app.js should pass jshint\', function() { \n      ok(false, \'app.js should pass jshint.\\napp.js: line 1, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\napp.js: line 2, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\napp.js: line 3, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\napp.js: line 4, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\napp.js: line 16, col 1, \\\'export\\\' is only available in ES6 (use esnext option).\\n\\n5 errors\'); \n    });\n  });//# sourceURL=selby/tests/app.jshint.js");

;eval("define(\"selby/tests/controllers/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/application.js should pass jshint\', function() { \n      ok(false, \'controllers/application.js should pass jshint.\\ncontrollers/application.js: line 1, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\ncontrollers/application.js: line 3, col 1, \\\'export\\\' is only available in ES6 (use esnext option).\\n\\n2 errors\'); \n    });\n  });//# sourceURL=selby/tests/controllers/application.jshint.js");

;eval("define(\"selby/tests/helpers/resolver\", \n  [\"ember/resolver\",\"selby/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=selby/tests/helpers/resolver.js");

;eval("define(\"selby/tests/helpers/start-app\", \n  [\"ember\",\"selby/app\",\"selby/router\",\"selby/config/environments/test\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Router.reopen({\n        location: \'none\'\n      });\n\n      Ember.run(function() {\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      App.reset(); // this shouldn\'t be needed, i want to be able to \"start an app at a specific URL\"\n\n      return App;\n    }\n  });//# sourceURL=selby/tests/helpers/start-app.js");

;eval("define(\"selby/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'router.js should pass jshint\', function() { \n      ok(false, \'router.js should pass jshint.\\nrouter.js: line 1, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\nrouter.js: line 2, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\nrouter.js: line 13, col 1, \\\'export\\\' is only available in ES6 (use esnext option).\\n\\n3 errors\'); \n    });\n  });//# sourceURL=selby/tests/router.jshint.js");

;eval("define(\"selby/tests/selby/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - selby/tests/helpers\');\n    test(\'selby/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'selby/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=selby/tests/selby/tests/helpers/resolver.jshint.js");

;eval("define(\"selby/tests/selby/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - selby/tests/helpers\');\n    test(\'selby/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'selby/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=selby/tests/selby/tests/helpers/start-app.jshint.js");

;eval("define(\"selby/tests/selby/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - selby/tests\');\n    test(\'selby/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'selby/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=selby/tests/selby/tests/test-helper.jshint.js");

;eval("define(\"selby/tests/selby/tests/unit/controllers/application-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - selby/tests/unit/controllers\');\n    test(\'selby/tests/unit/controllers/application-test.js should pass jshint\', function() { \n      ok(true, \'selby/tests/unit/controllers/application-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=selby/tests/selby/tests/unit/controllers/application-test.jshint.js");

;eval("define(\"selby/tests/test-helper\", \n  [\"selby/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\n    if (QUnit.urlParams.nocontainer) {\n      document.getElementById(\'ember-testing-container\').style.visibility = \'hidden\';\n    } else {\n      document.getElementById(\'ember-testing-container\').style.visibility = \'visible\';\n    }\n  });//# sourceURL=selby/tests/test-helper.js");

;eval("define(\"selby/tests/unit/controllers/application-test\", \n  [\"ember-qunit\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var moduleFor = __dependency1__.moduleFor;\n    var test = __dependency1__.test;\n\n    moduleFor(\'controller:application\', \'ApplicationController\', {\n      // Specify the other units that are required for this test.\n      // needs: [\'controller:foo\']\n    });\n\n    // Replace this with your real tests.\n    test(\'it exists\', function() {\n      var controller = this.subject();\n      ok(controller);\n    });\n  });//# sourceURL=selby/tests/unit/controllers/application-test.js");
